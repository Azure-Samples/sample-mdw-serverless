{
	"name": "bronze2silver - Notebook",
	"properties": {
		"activities": [
			{
				"name": "GetNewDroppedFiles",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFileName": "dropped_files.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "dropped_file_list",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Factory of Data Model 2",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetNewDroppedFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetNewDroppedFiles').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Check if not Processed Model 2",
							"description": "The update of control file when an entry is processed is out-of-scope for this sample. Once an entry is processed, the control file must be updated. ",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(item().Processed), equals(item().DataModelName, 'data_model_2'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "process data for model 2",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "Groupby data per month",
												"type": "NotebookReference"
											},
											"parameters": {
												"source_path": {
													"value": {
														"value": "@concat(item().FileLocation, '/daily.zip')",
														"type": "Expression"
													},
													"type": "string"
												},
												"factory_id": {
													"value": "@item().FactoryId",
													"type": "int"
												},
												"data_model_name": {
													"value": "@item().DataModelName",
													"type": "string"
												},
												"source_container": {
													"value": "bronze",
													"type": "string"
												},
												"account_name": {
													"value": "@{concat('medalionlake',replace(pipeline().DataFactory, 'medalionsynapse', ''))}",
													"type": "string"
												}
											},
											"snapshot": true,
											"sparkPool": {
												"referenceName": "sparkpool",
												"type": "BigDataPoolReference"
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Factory of Data Model 1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetNewDroppedFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetNewDroppedFiles').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Check not if Processed Model 2",
							"description": "The update of control file when an entry is processed is out-of-scope for this sample. Once an entry is processed, the control file must be updated. ",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(item().Processed), equals(item().DataModelName, 'data_model_1'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "process data for model 1",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "Groupby data per month",
												"type": "NotebookReference"
											},
											"parameters": {
												"source_path": {
													"value": {
														"value": "@concat(item().FileLocation, '/daily.zip')",
														"type": "Expression"
													},
													"type": "string"
												},
												"factory_id": {
													"value": "@item().FactoryId",
													"type": "int"
												},
												"data_model_name": {
													"value": "@item().DataModelName",
													"type": "string"
												},
												"source_container": {
													"value": "bronze",
													"type": "string"
												},
												"account_name": {
													"value": "@{concat('medalionlake',replace(pipeline().DataFactory, 'medalionsynapse', ''))}",
													"type": "string"
												}
											},
											"snapshot": true,
											"sparkPool": {
												"referenceName": "sparkpool",
												"type": "BigDataPoolReference"
											}
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2022-07-05T10:55:15Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}